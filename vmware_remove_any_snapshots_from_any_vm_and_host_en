# Set TLS 1.2 for the script
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

$PowerCLIConfiguration = Get-PowerCLIConfiguration -InvalidCertificateAction Ignore -Scope AllUsers
if ($PowerCLIConfiguration -ne "Ignore") {
        Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Scope AllUsers -confirm:$false
}

# Check and set Execution Policy
$executionPolicy = Get-ExecutionPolicy
if ($executionPolicy -ne "Unrestricted") {
    Write-Output "Execution Policy is not correctly configured. Setting Execution Policy..."
    Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force
}

# Check PSGallery repository setting
$psRepository = Get-PSRepository -Name PSGallery
if ($psRepository.InstallationPolicy -ne "Trusted") {
    Write-Output "PSGallery repository is not correctly configured. Setting Installation Policy..."
    Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
}

# Check installation status of VMware.PowerCLI module
$module = Get-Module -Name VMware.PowerCLI -ListAvailable
if (-not $module) {
    Write-Output "VMware.PowerCLI is not installed. Installing now..."
    Install-Module -AllowClobber VMware.PowerCLI -Force
}

$directoryPath = Join-Path $env:APPDATA "vmware_snapshot_removeal"

# Check if the directory already exists
if (-not (Test-Path $directoryPath)) {
    # Create directory (silent)
    $TestDir = New-Item -ItemType Directory -Path $directoryPath -ErrorAction SilentlyContinue
}

$credentialFilePath = "$directoryPath\credentials.xml"
$hostFilePath = "$directoryPath\Hostinfo.txt"
$vCenter = ""
$credential = $null

# Check for the presence of the credential file
if (Test-Path $credentialFilePath) {
    $storeCredentials = Read-Host "Do you want to load the credentials? (Yes/No)"

    if ($storeCredentials -eq "Yes") {
        $credential = Import-Clixml -Path $credentialFilePath
    }
}

# Check for the presence of the host information file
if (Test-Path $hostFilePath) {
    $storeHost = Read-Host "Do you want to load the host name? (Yes/No)"

    if ($storeHost -eq "Yes") {
        $vCenter = Get-Content -Path $hostFilePath
    }
}

# If no credentials are available, prompt for them
if (!$credential) {
    $storeCredentials = Read-Host "The credential file does not exist or you specified not to load it. Do you want to store the credentials? (Yes/No)"

    if ($storeCredentials -eq "Yes") {
        $credential = Get-Credential
        $credential | Export-Clixml -Path $credentialFilePath
    }
}

# If no host name is available, prompt for it
if ([string]::IsNullOrWhiteSpace($vCenter)) {
    $storeHost = Read-Host "The host information file does not exist or you specified not to load it. Do you want to store the host name? (Yes/No)"

    if ($storeHost -eq "Yes") {
        $vCenter = Read-Host "Enter the VCSA server name:"
        $vCenter | Out-File -FilePath $hostFilePath
    }
}

# Check for empty credentials
if (!$credential) {
    Write-Output "Credentials are required. Script will exit."
    exit
}

# Check for empty host name
if ([string]::IsNullOrWhiteSpace($vCenter)) {
    Write-Output "The host name cannot be empty. Script will exit."
    exit
}

# Connect to vCenter server
Connect-VIServer -Server $vCenter -Credential $Credential -Protocol https

# Get all VMs
$vms = Get-VM

# Initialize progress counters
$totalSnapshots = 0
$completedSnapshots = 0

# Count the total number of snapshots
foreach ($vm in $vms) {
    $totalSnapshots += (Get-Snapshot -VM $vm).Count
}

# Loop through each VM and remove snapshots
foreach ($vm in $vms) {
    Write-Output "Removing snapshots for VM $($vm.Name)..."

    # Get snapshots for the current VM
    $snapshots = Get-Snapshot -VM $vm

    # Loop through each snapshot and remove it
    foreach ($snapshot in $snapshots) {
        Write-Output "Removing snapshot $($snapshot.Name)..."
        Remove-Snapshot -Snapshot $snapshot -Confirm:$false

        $completedSnapshots++
        $progressPercentage = ($completedSnapshots / $totalSnapshots) * 100
        Write-Progress -Activity "Removing Snapshots" -Status "Progress: $($progressPercentage.ToString("F2"))%" -PercentComplete $progressPercentage
    }
}

# Disconnect from vCenter server
Disconnect-VIServer -Server $vCenter -Force

Write-Output "All snapshots should been removed. Lazy Admin...."
